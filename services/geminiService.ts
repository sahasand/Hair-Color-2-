import { GoogleGenAI, Type, Modality } from "@google/genai";
import type { ColorSuggestion } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

export async function getHairColorSuggestions(imageBase64: string): Promise<ColorSuggestion[]> {
  try {
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: {
            parts: [
                {
                    inlineData: {
                        mimeType: 'image/jpeg',
                        data: imageBase64,
                    },
                },
                {
                    text: `
                        You are a professional colorist for a luxury hair salon. 
                        Analyze this person's photo, paying close attention to their skin tone and undertones (e.g., cool, warm, neutral).
                        Based on this analysis, suggest 5 complementary, modern, and fashionable hair colors that would harmonize with their features.
                        For each color, provide a creative name (e.g., 'Warm Chestnut', 'Sun-kissed Gold'), its precise hex code, and a harmony rating.
                        The harmony rating must be one of the following strings: "excellent", "good", or "neutral", based on how well the color complements their skin tone.
                        The output must be in JSON format.
                    `,
                },
            ],
        },
        config: {
            responseMimeType: "application/json",
            responseSchema: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        name: {
                            type: Type.STRING,
                            description: 'The creative name of the hair color.',
                        },
                        hex: {
                            type: Type.STRING,
                            description: 'The hex code of the color, starting with #.',
                        },
                        harmony: {
                            type: Type.STRING,
                            description: 'The harmony rating with the person\'s skin tone. Must be "excellent", "good", or "neutral".',
                        },
                    },
                    required: ["name", "hex", "harmony"],
                },
            },
        },
    });

    const jsonString = response.text.trim();
    const suggestions = JSON.parse(jsonString);
    
    // Validate that the result is an array of objects with the correct properties
    if (Array.isArray(suggestions) && suggestions.every(s => typeof s.name === 'string' && typeof s.hex === 'string' && typeof s.harmony === 'string')) {
      return suggestions as ColorSuggestion[];
    } else {
      throw new Error("Invalid format received from AI.");
    }
  } catch (error) {
    console.error("Error getting hair color suggestions:", error);
    throw new Error("Could not get AI suggestions. Please try another photo.");
  }
}

export async function recolorHair(imageBase64: string, targetColorHex: string): Promise<string> {
  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          {
            inlineData: {
              data: imageBase64,
              mimeType: 'image/jpeg', // Assuming jpeg, png also works
            },
          },
          {
            text: `Analyze the person in this image. Detect their hair. Recolor *only* their hair to the hex color ${targetColorHex}. Preserve the natural texture, lighting, shadows, and highlights of the hair. Do not change the person's skin tone, clothes, or the background. Output only the modified image.`,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }
    
    throw new Error("No image was generated by the AI.");

  } catch (error) {
    console.error("Error recoloring hair:", error);
    throw new Error("Could not apply the new hair color. Please try again.");
  }
}